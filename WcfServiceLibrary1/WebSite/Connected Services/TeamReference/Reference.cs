//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TeamReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TeamDto", Namespace="http://schemas.datacontract.org/2004/07/Business")]
    public partial class TeamDto : TeamReference.BaseDto
    {
        
        private double AverageAgePlayersField;
        
        private string CountryField;
        
        private System.DateTime DateCreationField;
        
        private decimal NetWorthField;
        
        private string TeamNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double AverageAgePlayers
        {
            get
            {
                return this.AverageAgePlayersField;
            }
            set
            {
                this.AverageAgePlayersField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country
        {
            get
            {
                return this.CountryField;
            }
            set
            {
                this.CountryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreation
        {
            get
            {
                return this.DateCreationField;
            }
            set
            {
                this.DateCreationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal NetWorth
        {
            get
            {
                return this.NetWorthField;
            }
            set
            {
                this.NetWorthField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamName
        {
            get
            {
                return this.TeamNameField;
            }
            set
            {
                this.TeamNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseDto", Namespace="http://schemas.datacontract.org/2004/07/Business.DTOs")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TeamReference.TeamDto))]
    public partial class BaseDto : object
    {
        
        private int IdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TeamReference.ITeams")]
    public interface ITeams
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeams/GetAllByName", ReplyAction="http://tempuri.org/ITeams/GetAllByNameResponse")]
        TeamReference.TeamDto[] GetAllByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeams/GetAllByName", ReplyAction="http://tempuri.org/ITeams/GetAllByNameResponse")]
        System.Threading.Tasks.Task<TeamReference.TeamDto[]> GetAllByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeams/GetAllByCountry", ReplyAction="http://tempuri.org/ITeams/GetAllByCountryResponse")]
        TeamReference.TeamDto[] GetAllByCountry(string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeams/GetAllByCountry", ReplyAction="http://tempuri.org/ITeams/GetAllByCountryResponse")]
        System.Threading.Tasks.Task<TeamReference.TeamDto[]> GetAllByCountryAsync(string country);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeams/GetAll", ReplyAction="http://tempuri.org/ITeams/GetAllResponse")]
        TeamReference.TeamDto[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeams/GetAll", ReplyAction="http://tempuri.org/ITeams/GetAllResponse")]
        System.Threading.Tasks.Task<TeamReference.TeamDto[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeams/GetById", ReplyAction="http://tempuri.org/ITeams/GetByIdResponse")]
        TeamReference.TeamDto GetById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeams/GetById", ReplyAction="http://tempuri.org/ITeams/GetByIdResponse")]
        System.Threading.Tasks.Task<TeamReference.TeamDto> GetByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeams/Create", ReplyAction="http://tempuri.org/ITeams/CreateResponse")]
        string Create(TeamReference.TeamDto team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeams/Create", ReplyAction="http://tempuri.org/ITeams/CreateResponse")]
        System.Threading.Tasks.Task<string> CreateAsync(TeamReference.TeamDto team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeams/Update", ReplyAction="http://tempuri.org/ITeams/UpdateResponse")]
        string Update(TeamReference.TeamDto team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeams/Update", ReplyAction="http://tempuri.org/ITeams/UpdateResponse")]
        System.Threading.Tasks.Task<string> UpdateAsync(TeamReference.TeamDto team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeams/Delete", ReplyAction="http://tempuri.org/ITeams/DeleteResponse")]
        string Delete(int teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITeams/Delete", ReplyAction="http://tempuri.org/ITeams/DeleteResponse")]
        System.Threading.Tasks.Task<string> DeleteAsync(int teamId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ITeamsChannel : TeamReference.ITeams, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class TeamsClient : System.ServiceModel.ClientBase<TeamReference.ITeams>, TeamReference.ITeams
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TeamsClient() : 
                base(TeamsClient.GetDefaultBinding(), TeamsClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ITeams.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TeamsClient(EndpointConfiguration endpointConfiguration) : 
                base(TeamsClient.GetBindingForEndpoint(endpointConfiguration), TeamsClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TeamsClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TeamsClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TeamsClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TeamsClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TeamsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public TeamReference.TeamDto[] GetAllByName(string name)
        {
            return base.Channel.GetAllByName(name);
        }
        
        public System.Threading.Tasks.Task<TeamReference.TeamDto[]> GetAllByNameAsync(string name)
        {
            return base.Channel.GetAllByNameAsync(name);
        }
        
        public TeamReference.TeamDto[] GetAllByCountry(string country)
        {
            return base.Channel.GetAllByCountry(country);
        }
        
        public System.Threading.Tasks.Task<TeamReference.TeamDto[]> GetAllByCountryAsync(string country)
        {
            return base.Channel.GetAllByCountryAsync(country);
        }
        
        public TeamReference.TeamDto[] GetAll()
        {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<TeamReference.TeamDto[]> GetAllAsync()
        {
            return base.Channel.GetAllAsync();
        }
        
        public TeamReference.TeamDto GetById(int id)
        {
            return base.Channel.GetById(id);
        }
        
        public System.Threading.Tasks.Task<TeamReference.TeamDto> GetByIdAsync(int id)
        {
            return base.Channel.GetByIdAsync(id);
        }
        
        public string Create(TeamReference.TeamDto team)
        {
            return base.Channel.Create(team);
        }
        
        public System.Threading.Tasks.Task<string> CreateAsync(TeamReference.TeamDto team)
        {
            return base.Channel.CreateAsync(team);
        }
        
        public string Update(TeamReference.TeamDto team)
        {
            return base.Channel.Update(team);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAsync(TeamReference.TeamDto team)
        {
            return base.Channel.UpdateAsync(team);
        }
        
        public string Delete(int teamId)
        {
            return base.Channel.Delete(teamId);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAsync(int teamId)
        {
            return base.Channel.DeleteAsync(teamId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITeams))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITeams))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:53506/Teams.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return TeamsClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ITeams);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return TeamsClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ITeams);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ITeams,
        }
    }
}
